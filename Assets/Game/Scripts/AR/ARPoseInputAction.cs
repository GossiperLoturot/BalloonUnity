//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.9.0
//     from Assets/Scripts/Utility/AR/ARPoseInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine;

public partial class @ARPoseInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ARPoseInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ARPoseInputAction"",
    ""maps"": [
        {
            ""name"": ""Default"",
            ""id"": ""34728299-5f8e-436a-a0d6-e5111c39e79d"",
            ""actions"": [
                {
                    ""name"": ""Attitude"",
                    ""type"": ""Value"",
                    ""id"": ""6f538593-8028-4b69-b03b-5a2ed80149c9"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Accel"",
                    ""type"": ""Value"",
                    ""id"": ""326b173c-274f-4cb5-a457-62111bbe6da5"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6814c9f1-e074-47bd-bb86-f1b61cb04afb"",
                    ""path"": ""<AttitudeSensor>/attitude"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attitude"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8692a67f-9546-4f5c-a3f7-83540896b6c3"",
                    ""path"": ""<LinearAccelerationSensor>/acceleration"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Default
        m_Default = asset.FindActionMap("Default", throwIfNotFound: true);
        m_Default_Attitude = m_Default.FindAction("Attitude", throwIfNotFound: true);
        m_Default_Accel = m_Default.FindAction("Accel", throwIfNotFound: true);
    }

    ~@ARPoseInputAction()
    {
        Debug.Assert(!m_Default.enabled, "This will cause a leak and performance issues, ARPoseInputAction.Default.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Default
    private readonly InputActionMap m_Default;
    private List<IDefaultActions> m_DefaultActionsCallbackInterfaces = new List<IDefaultActions>();
    private readonly InputAction m_Default_Attitude;
    private readonly InputAction m_Default_Accel;
    public struct DefaultActions
    {
        private @ARPoseInputAction m_Wrapper;
        public DefaultActions(@ARPoseInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Attitude => m_Wrapper.m_Default_Attitude;
        public InputAction @Accel => m_Wrapper.m_Default_Accel;
        public InputActionMap Get() { return m_Wrapper.m_Default; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DefaultActions set) { return set.Get(); }
        public void AddCallbacks(IDefaultActions instance)
        {
            if (instance == null || m_Wrapper.m_DefaultActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DefaultActionsCallbackInterfaces.Add(instance);
            @Attitude.started += instance.OnAttitude;
            @Attitude.performed += instance.OnAttitude;
            @Attitude.canceled += instance.OnAttitude;
            @Accel.started += instance.OnAccel;
            @Accel.performed += instance.OnAccel;
            @Accel.canceled += instance.OnAccel;
        }

        private void UnregisterCallbacks(IDefaultActions instance)
        {
            @Attitude.started -= instance.OnAttitude;
            @Attitude.performed -= instance.OnAttitude;
            @Attitude.canceled -= instance.OnAttitude;
            @Accel.started -= instance.OnAccel;
            @Accel.performed -= instance.OnAccel;
            @Accel.canceled -= instance.OnAccel;
        }

        public void RemoveCallbacks(IDefaultActions instance)
        {
            if (m_Wrapper.m_DefaultActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDefaultActions instance)
        {
            foreach (var item in m_Wrapper.m_DefaultActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DefaultActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DefaultActions @Default => new DefaultActions(this);
    public interface IDefaultActions
    {
        void OnAttitude(InputAction.CallbackContext context);
        void OnAccel(InputAction.CallbackContext context);
    }
}
